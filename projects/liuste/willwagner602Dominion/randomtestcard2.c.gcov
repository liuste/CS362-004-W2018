        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
        -:    9:#define MAX_TESTS 100000
        -:   10:
function assert called 100000 returned 100% blocks executed 75%
   100000:   11:int assert(int number)
        -:   12:{
   100000:   13:	if(number == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
   100000:   14:		return 0;
        -:   15:	else
    #####:   16:		return 1;
        -:   17:}
        -:   18:
function main called 1 returned 100% blocks executed 95%
        1:   19:int main (int argc, char** argv)	{
        1:   20:	int k[10] = {adventurer, council_room, feast, village, great_hall, embargo, cutpurse, sea_hag, baron, smithy};
        -:   21:	struct gameState state;
        -:   22:	int i;
        -:   23:	int temp;
        -:   24:	int pre1;
        1:   25:	int player_count = 0;
        1:   26:	int player = 0;
        -:   27:	int seed;
        -:   28:
   100001:   29:	for (i = 0; i < MAX_TESTS; i++) {	
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   100000:   30:		printf ("\n******Test Smithy******\n");
call    0 returned 100%
        -:   31:
   100000:   32:		seed = rand();		//pick random seed
call    0 returned 100%
   100000:   33:		player_count = rand() % 3 + 2;
call    0 returned 100%
   100000:   34:		player = rand() % player_count;
call    0 returned 100%
   100000:   35:		initializeGame(player_count, k, seed, &state);	//initialize Gamestate
call    0 returned 100%
   100000:   36:		state.whoseTurn = player;
   100000:   37:		state.deckCount[player] = rand() % MAX_DECK; //Pick random deck size out of MAX DECK size
call    0 returned 100%
   100000:   38:		state.discardCount[player] = rand() % MAX_DECK;
call    0 returned 100%
   100000:   39:		state.handCount[player] = rand() % MAX_HAND;
call    0 returned 100%
   100000:   40:		pre1 = state.handCount[player]+2;
   100000:   41:		state.hand[player][0] = smithy;
   100000:   42:		state.numActions = rand() % 10; 
call    0 returned 100%
   100000:   43:		cardEffect(smithy, 0, 0, 0, &state, 0, 0);
call    0 returned 100%
   100000:   44:		printf("pre1: %d\n", pre1);
call    0 returned 100%
   100000:   45:		printf("state.handCount[player] after cardEffect called: %d\n", state.handCount[player]);
call    0 returned 100%
   100000:   46:		if(assert(state.handCount[player] == pre1))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   47:			printf("\nTEST SUCCESSFULLY COMPLETED\n");
call    0 never executed
        -:   48:		else
   100000:   49:			printf("\nFAILED\n");
call    0 returned 100%
        -:   50:	}
        1:   51:	return 0;
        -:   52:} 
