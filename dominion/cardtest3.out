
******Test Smithy******
Current hand count: 5
Current hand count: 6
Current hand count: 7
Current hand count: 8
handCount (should be 7)= 8

FAILED
File 'cardtest3.c'
Lines executed:96.00% of 25
Branches executed:100.00% of 6
Taken at least once:66.67% of 6
Calls executed:85.71% of 7
Creating 'cardtest3.c.gcov'

        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <string.h>
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function assert called 2 returned 100% blocks executed 100%
        2:    9:int assert(int number)
        -:   10:{
        2:   11:	if(number == 0)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:   12:		return 0;
        -:   13:	else
        1:   14:		return 1;
        -:   15:}
        -:   16:
function main called 1 returned 100% blocks executed 91%
        1:   17:int main (int argc, char** argv)	{
        -:   18:	struct gameState G;
        -:   19:	int temp;
        -:   20:	
        1:   21:	printf ("\n******Test Smithy******\n");
call    0 returned 100%
        -:   22:
        1:   23:	G.numActions = 0;
        1:   24:	G.handCount[0] = 5;
        1:   25:	G.hand[0][0] = smithy;
        1:   26:	G.hand[0][1] = copper;
        1:   27:	G.hand[0][2] = copper;
        1:   28:	G.hand[0][3] = copper;
        1:   29:	G.hand[0][4] = copper;
        -:   30:	
        1:   31:	G.deckCount[0] = 4;
        1:   32:	G.deck[0][1] = feast;
        1:   33:	G.deck[0][2] = copper;
        1:   34:	G.deck[0][3] = copper;
        1:   35:	G.deck[0][4] = mine;
        -:   36:	
        1:   37:	temp = cardEffect(smithy, 0, 0, 0, &G, 0, 0);
call    0 returned 100%
        1:   38:	if (assert(temp == 0))
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1:   39:		printf("handCount (should be 7)= %d\n", G.handCount[0]);
call    0 returned 100%
        1:   40:	if(assert(G.handCount[0] == 7))
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####:   41:		printf("\nTEST SUCCESSFULLY COMPLETED\n");
call    0 never executed
        -:   42:	else
        1:   43:		printf("\nFAILED\n");
call    0 returned 100%
        1:   44:	return 0;
        -:   45:} 
